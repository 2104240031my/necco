use crate::crypto::CryptoError;
use crate::crypto::cipher::BlockCipher;

pub enum AesAlgorithm {
    Aes128,
    Aes192,
    Aes256
}
/*
key expansion 
optimize invalid
*/
pub struct Aes {
    pub w:  [u8; 240],
    nk: usize,
    nb: usize,
    nr: usize
}

static S_BOX: [u8; 256] = [
    0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
    0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
    0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
    0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
    0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
    0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
    0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
    0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
    0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
    0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
    0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
    0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
    0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
    0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
    0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
    0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16
];

static S_BOX_P1: [u8; 1024] = [
    0xc6, 0x63, 0x63, 0xa5, 0xf8, 0x7c, 0x7c, 0x84, 0xee, 0x77, 0x77, 0x99, 0xf6, 0x7b, 0x7b, 0x8d,
    0xff, 0xf2, 0xf2, 0x0d, 0xd6, 0x6b, 0x6b, 0xbd, 0xde, 0x6f, 0x6f, 0xb1, 0x91, 0xc5, 0xc5, 0x54, 
    0x60, 0x30, 0x30, 0x50, 0x02, 0x01, 0x01, 0x03, 0xce, 0x67, 0x67, 0xa9, 0x56, 0x2b, 0x2b, 0x7d, 
    0xe7, 0xfe, 0xfe, 0x19, 0xb5, 0xd7, 0xd7, 0x62, 0x4d, 0xab, 0xab, 0xe6, 0xec, 0x76, 0x76, 0x9a, 
    0x8f, 0xca, 0xca, 0x45, 0x1f, 0x82, 0x82, 0x9d, 0x89, 0xc9, 0xc9, 0x40, 0xfa, 0x7d, 0x7d, 0x87, 
    0xef, 0xfa, 0xfa, 0x15, 0xb2, 0x59, 0x59, 0xeb, 0x8e, 0x47, 0x47, 0xc9, 0xfb, 0xf0, 0xf0, 0x0b, 
    0x41, 0xad, 0xad, 0xec, 0xb3, 0xd4, 0xd4, 0x67, 0x5f, 0xa2, 0xa2, 0xfd, 0x45, 0xaf, 0xaf, 0xea, 
    0x23, 0x9c, 0x9c, 0xbf, 0x53, 0xa4, 0xa4, 0xf7, 0xe4, 0x72, 0x72, 0x96, 0x9b, 0xc0, 0xc0, 0x5b, 
    0x75, 0xb7, 0xb7, 0xc2, 0xe1, 0xfd, 0xfd, 0x1c, 0x3d, 0x93, 0x93, 0xae, 0x4c, 0x26, 0x26, 0x6a, 
    0x6c, 0x36, 0x36, 0x5a, 0x7e, 0x3f, 0x3f, 0x41, 0xf5, 0xf7, 0xf7, 0x02, 0x83, 0xcc, 0xcc, 0x4f, 
    0x68, 0x34, 0x34, 0x5c, 0x51, 0xa5, 0xa5, 0xf4, 0xd1, 0xe5, 0xe5, 0x34, 0xf9, 0xf1, 0xf1, 0x08,
    0xe2, 0x71, 0x71, 0x93, 0xab, 0xd8, 0xd8, 0x73, 0x62, 0x31, 0x31, 0x53, 0x2a, 0x15, 0x15, 0x3f, 
    0x08, 0x04, 0x04, 0x0c, 0x95, 0xc7, 0xc7, 0x52, 0x46, 0x23, 0x23, 0x65, 0x9d, 0xc3, 0xc3, 0x5e, 
    0x30, 0x18, 0x18, 0x28, 0x37, 0x96, 0x96, 0xa1, 0x0a, 0x05, 0x05, 0x0f, 0x2f, 0x9a, 0x9a, 0xb5, 
    0x0e, 0x07, 0x07, 0x09, 0x24, 0x12, 0x12, 0x36, 0x1b, 0x80, 0x80, 0x9b, 0xdf, 0xe2, 0xe2, 0x3d,
    0xcd, 0xeb, 0xeb, 0x26, 0x4e, 0x27, 0x27, 0x69, 0x7f, 0xb2, 0xb2, 0xcd, 0xea, 0x75, 0x75, 0x9f, 
    0x12, 0x09, 0x09, 0x1b, 0x1d, 0x83, 0x83, 0x9e, 0x58, 0x2c, 0x2c, 0x74, 0x34, 0x1a, 0x1a, 0x2e, 
    0x36, 0x1b, 0x1b, 0x2d, 0xdc, 0x6e, 0x6e, 0xb2, 0xb4, 0x5a, 0x5a, 0xee, 0x5b, 0xa0, 0xa0, 0xfb, 
    0xa4, 0x52, 0x52, 0xf6, 0x76, 0x3b, 0x3b, 0x4d, 0xb7, 0xd6, 0xd6, 0x61, 0x7d, 0xb3, 0xb3, 0xce, 
    0x52, 0x29, 0x29, 0x7b, 0xdd, 0xe3, 0xe3, 0x3e, 0x5e, 0x2f, 0x2f, 0x71, 0x13, 0x84, 0x84, 0x97, 
    0xa6, 0x53, 0x53, 0xf5, 0xb9, 0xd1, 0xd1, 0x68, 0x00, 0x00, 0x00, 0x00, 0xc1, 0xed, 0xed, 0x2c, 
    0x40, 0x20, 0x20, 0x60, 0xe3, 0xfc, 0xfc, 0x1f, 0x79, 0xb1, 0xb1, 0xc8, 0xb6, 0x5b, 0x5b, 0xed, 
    0xd4, 0x6a, 0x6a, 0xbe, 0x8d, 0xcb, 0xcb, 0x46, 0x67, 0xbe, 0xbe, 0xd9, 0x72, 0x39, 0x39, 0x4b, 
    0x94, 0x4a, 0x4a, 0xde, 0x98, 0x4c, 0x4c, 0xd4, 0xb0, 0x58, 0x58, 0xe8, 0x85, 0xcf, 0xcf, 0x4a, 
    0xbb, 0xd0, 0xd0, 0x6b, 0xc5, 0xef, 0xef, 0x2a, 0x4f, 0xaa, 0xaa, 0xe5, 0xed, 0xfb, 0xfb, 0x16, 
    0x86, 0x43, 0x43, 0xc5, 0x9a, 0x4d, 0x4d, 0xd7, 0x66, 0x33, 0x33, 0x55, 0x11, 0x85, 0x85, 0x94, 
    0x8a, 0x45, 0x45, 0xcf, 0xe9, 0xf9, 0xf9, 0x10, 0x04, 0x02, 0x02, 0x06, 0xfe, 0x7f, 0x7f, 0x81, 
    0xa0, 0x50, 0x50, 0xf0, 0x78, 0x3c, 0x3c, 0x44, 0x25, 0x9f, 0x9f, 0xba, 0x4b, 0xa8, 0xa8, 0xe3, 
    0xa2, 0x51, 0x51, 0xf3, 0x5d, 0xa3, 0xa3, 0xfe, 0x80, 0x40, 0x40, 0xc0, 0x05, 0x8f, 0x8f, 0x8a, 
    0x3f, 0x92, 0x92, 0xad, 0x21, 0x9d, 0x9d, 0xbc, 0x70, 0x38, 0x38, 0x48, 0xf1, 0xf5, 0xf5, 0x04, 
    0x63, 0xbc, 0xbc, 0xdf, 0x77, 0xb6, 0xb6, 0xc1, 0xaf, 0xda, 0xda, 0x75, 0x42, 0x21, 0x21, 0x63, 
    0x20, 0x10, 0x10, 0x30, 0xe5, 0xff, 0xff, 0x1a, 0xfd, 0xf3, 0xf3, 0x0e, 0xbf, 0xd2, 0xd2, 0x6d, 
    0x81, 0xcd, 0xcd, 0x4c, 0x18, 0x0c, 0x0c, 0x14, 0x26, 0x13, 0x13, 0x35, 0xc3, 0xec, 0xec, 0x2f, 
    0xbe, 0x5f, 0x5f, 0xe1, 0x35, 0x97, 0x97, 0xa2, 0x88, 0x44, 0x44, 0xcc, 0x2e, 0x17, 0x17, 0x39, 
    0x93, 0xc4, 0xc4, 0x57, 0x55, 0xa7, 0xa7, 0xf2, 0xfc, 0x7e, 0x7e, 0x82, 0x7a, 0x3d, 0x3d, 0x47, 
    0xc8, 0x64, 0x64, 0xac, 0xba, 0x5d, 0x5d, 0xe7, 0x32, 0x19, 0x19, 0x2b, 0xe6, 0x73, 0x73, 0x95, 
    0xc0, 0x60, 0x60, 0xa0, 0x19, 0x81, 0x81, 0x98, 0x9e, 0x4f, 0x4f, 0xd1, 0xa3, 0xdc, 0xdc, 0x7f, 
    0x44, 0x22, 0x22, 0x66, 0x54, 0x2a, 0x2a, 0x7e, 0x3b, 0x90, 0x90, 0xab, 0x0b, 0x88, 0x88, 0x83, 
    0x8c, 0x46, 0x46, 0xca, 0xc7, 0xee, 0xee, 0x29, 0x6b, 0xb8, 0xb8, 0xd3, 0x28, 0x14, 0x14, 0x3c, 
    0xa7, 0xde, 0xde, 0x79, 0xbc, 0x5e, 0x5e, 0xe2, 0x16, 0x0b, 0x0b, 0x1d, 0xad, 0xdb, 0xdb, 0x76, 
    0xdb, 0xe0, 0xe0, 0x3b, 0x64, 0x32, 0x32, 0x56, 0x74, 0x3a, 0x3a, 0x4e, 0x14, 0x0a, 0x0a, 0x1e, 
    0x92, 0x49, 0x49, 0xdb, 0x0c, 0x06, 0x06, 0x0a, 0x48, 0x24, 0x24, 0x6c, 0xb8, 0x5c, 0x5c, 0xe4, 
    0x9f, 0xc2, 0xc2, 0x5d, 0xbd, 0xd3, 0xd3, 0x6e, 0x43, 0xac, 0xac, 0xef, 0xc4, 0x62, 0x62, 0xa6, 
    0x39, 0x91, 0x91, 0xa8, 0x31, 0x95, 0x95, 0xa4, 0xd3, 0xe4, 0xe4, 0x37, 0xf2, 0x79, 0x79, 0x8b, 
    0xd5, 0xe7, 0xe7, 0x32, 0x8b, 0xc8, 0xc8, 0x43, 0x6e, 0x37, 0x37, 0x59, 0xda, 0x6d, 0x6d, 0xb7, 
    0x01, 0x8d, 0x8d, 0x8c, 0xb1, 0xd5, 0xd5, 0x64, 0x9c, 0x4e, 0x4e, 0xd2, 0x49, 0xa9, 0xa9, 0xe0, 
    0xd8, 0x6c, 0x6c, 0xb4, 0xac, 0x56, 0x56, 0xfa, 0xf3, 0xf4, 0xf4, 0x07, 0xcf, 0xea, 0xea, 0x25, 
    0xca, 0x65, 0x65, 0xaf, 0xf4, 0x7a, 0x7a, 0x8e, 0x47, 0xae, 0xae, 0xe9, 0x10, 0x08, 0x08, 0x18, 
    0x6f, 0xba, 0xba, 0xd5, 0xf0, 0x78, 0x78, 0x88, 0x4a, 0x25, 0x25, 0x6f, 0x5c, 0x2e, 0x2e, 0x72, 
    0x38, 0x1c, 0x1c, 0x24, 0x57, 0xa6, 0xa6, 0xf1, 0x73, 0xb4, 0xb4, 0xc7, 0x97, 0xc6, 0xc6, 0x51, 
    0xcb, 0xe8, 0xe8, 0x23, 0xa1, 0xdd, 0xdd, 0x7c, 0xe8, 0x74, 0x74, 0x9c, 0x3e, 0x1f, 0x1f, 0x21, 
    0x96, 0x4b, 0x4b, 0xdd, 0x61, 0xbd, 0xbd, 0xdc, 0x0d, 0x8b, 0x8b, 0x86, 0x0f, 0x8a, 0x8a, 0x85, 
    0xe0, 0x70, 0x70, 0x90, 0x7c, 0x3e, 0x3e, 0x42, 0x71, 0xb5, 0xb5, 0xc4, 0xcc, 0x66, 0x66, 0xaa, 
    0x90, 0x48, 0x48, 0xd8, 0x06, 0x03, 0x03, 0x05, 0xf7, 0xf6, 0xf6, 0x01, 0x1c, 0x0e, 0x0e, 0x12, 
    0xc2, 0x61, 0x61, 0xa3, 0x6a, 0x35, 0x35, 0x5f, 0xae, 0x57, 0x57, 0xf9, 0x69, 0xb9, 0xb9, 0xd0, 
    0x17, 0x86, 0x86, 0x91, 0x99, 0xc1, 0xc1, 0x58, 0x3a, 0x1d, 0x1d, 0x27, 0x27, 0x9e, 0x9e, 0xb9, 
    0xd9, 0xe1, 0xe1, 0x38, 0xeb, 0xf8, 0xf8, 0x13, 0x2b, 0x98, 0x98, 0xb3, 0x22, 0x11, 0x11, 0x33, 
    0xd2, 0x69, 0x69, 0xbb, 0xa9, 0xd9, 0xd9, 0x70, 0x07, 0x8e, 0x8e, 0x89, 0x33, 0x94, 0x94, 0xa7, 
    0x2d, 0x9b, 0x9b, 0xb6, 0x3c, 0x1e, 0x1e, 0x22, 0x15, 0x87, 0x87, 0x92, 0xc9, 0xe9, 0xe9, 0x20, 
    0x87, 0xce, 0xce, 0x49, 0xaa, 0x55, 0x55, 0xff, 0x50, 0x28, 0x28, 0x78, 0xa5, 0xdf, 0xdf, 0x7a, 
    0x03, 0x8c, 0x8c, 0x8f, 0x59, 0xa1, 0xa1, 0xf8, 0x09, 0x89, 0x89, 0x80, 0x1a, 0x0d, 0x0d, 0x17, 
    0x65, 0xbf, 0xbf, 0xda, 0xd7, 0xe6, 0xe6, 0x31, 0x84, 0x42, 0x42, 0xc6, 0xd0, 0x68, 0x68, 0xb8, 
    0x82, 0x41, 0x41, 0xc3, 0x29, 0x99, 0x99, 0xb0, 0x5a, 0x2d, 0x2d, 0x77, 0x1e, 0x0f, 0x0f, 0x11, 
    0x7b, 0xb0, 0xb0, 0xcb, 0xa8, 0x54, 0x54, 0xfc, 0x6d, 0xbb, 0xbb, 0xd6, 0x2c, 0x16, 0x16, 0x3a
];

static S_BOX_P2: [u8; 1024] = [
    0xa5, 0xc6, 0x63, 0x63, 0x84, 0xf8, 0x7c, 0x7c, 0x99, 0xee, 0x77, 0x77, 0x8d, 0xf6, 0x7b, 0x7b, 
    0x0d, 0xff, 0xf2, 0xf2, 0xbd, 0xd6, 0x6b, 0x6b, 0xb1, 0xde, 0x6f, 0x6f, 0x54, 0x91, 0xc5, 0xc5, 
    0x50, 0x60, 0x30, 0x30, 0x03, 0x02, 0x01, 0x01, 0xa9, 0xce, 0x67, 0x67, 0x7d, 0x56, 0x2b, 0x2b, 
    0x19, 0xe7, 0xfe, 0xfe, 0x62, 0xb5, 0xd7, 0xd7, 0xe6, 0x4d, 0xab, 0xab, 0x9a, 0xec, 0x76, 0x76, 
    0x45, 0x8f, 0xca, 0xca, 0x9d, 0x1f, 0x82, 0x82, 0x40, 0x89, 0xc9, 0xc9, 0x87, 0xfa, 0x7d, 0x7d, 
    0x15, 0xef, 0xfa, 0xfa, 0xeb, 0xb2, 0x59, 0x59, 0xc9, 0x8e, 0x47, 0x47, 0x0b, 0xfb, 0xf0, 0xf0, 
    0xec, 0x41, 0xad, 0xad, 0x67, 0xb3, 0xd4, 0xd4, 0xfd, 0x5f, 0xa2, 0xa2, 0xea, 0x45, 0xaf, 0xaf, 
    0xbf, 0x23, 0x9c, 0x9c, 0xf7, 0x53, 0xa4, 0xa4, 0x96, 0xe4, 0x72, 0x72, 0x5b, 0x9b, 0xc0, 0xc0, 
    0xc2, 0x75, 0xb7, 0xb7, 0x1c, 0xe1, 0xfd, 0xfd, 0xae, 0x3d, 0x93, 0x93, 0x6a, 0x4c, 0x26, 0x26, 
    0x5a, 0x6c, 0x36, 0x36, 0x41, 0x7e, 0x3f, 0x3f, 0x02, 0xf5, 0xf7, 0xf7, 0x4f, 0x83, 0xcc, 0xcc, 
    0x5c, 0x68, 0x34, 0x34, 0xf4, 0x51, 0xa5, 0xa5, 0x34, 0xd1, 0xe5, 0xe5, 0x08, 0xf9, 0xf1, 0xf1, 
    0x93, 0xe2, 0x71, 0x71, 0x73, 0xab, 0xd8, 0xd8, 0x53, 0x62, 0x31, 0x31, 0x3f, 0x2a, 0x15, 0x15, 
    0x0c, 0x08, 0x04, 0x04, 0x52, 0x95, 0xc7, 0xc7, 0x65, 0x46, 0x23, 0x23, 0x5e, 0x9d, 0xc3, 0xc3, 
    0x28, 0x30, 0x18, 0x18, 0xa1, 0x37, 0x96, 0x96, 0x0f, 0x0a, 0x05, 0x05, 0xb5, 0x2f, 0x9a, 0x9a, 
    0x09, 0x0e, 0x07, 0x07, 0x36, 0x24, 0x12, 0x12, 0x9b, 0x1b, 0x80, 0x80, 0x3d, 0xdf, 0xe2, 0xe2, 
    0x26, 0xcd, 0xeb, 0xeb, 0x69, 0x4e, 0x27, 0x27, 0xcd, 0x7f, 0xb2, 0xb2, 0x9f, 0xea, 0x75, 0x75, 
    0x1b, 0x12, 0x09, 0x09, 0x9e, 0x1d, 0x83, 0x83, 0x74, 0x58, 0x2c, 0x2c, 0x2e, 0x34, 0x1a, 0x1a, 
    0x2d, 0x36, 0x1b, 0x1b, 0xb2, 0xdc, 0x6e, 0x6e, 0xee, 0xb4, 0x5a, 0x5a, 0xfb, 0x5b, 0xa0, 0xa0, 
    0xf6, 0xa4, 0x52, 0x52, 0x4d, 0x76, 0x3b, 0x3b, 0x61, 0xb7, 0xd6, 0xd6, 0xce, 0x7d, 0xb3, 0xb3, 
    0x7b, 0x52, 0x29, 0x29, 0x3e, 0xdd, 0xe3, 0xe3, 0x71, 0x5e, 0x2f, 0x2f, 0x97, 0x13, 0x84, 0x84, 
    0xf5, 0xa6, 0x53, 0x53, 0x68, 0xb9, 0xd1, 0xd1, 0x00, 0x00, 0x00, 0x00, 0x2c, 0xc1, 0xed, 0xed, 
    0x60, 0x40, 0x20, 0x20, 0x1f, 0xe3, 0xfc, 0xfc, 0xc8, 0x79, 0xb1, 0xb1, 0xed, 0xb6, 0x5b, 0x5b, 
    0xbe, 0xd4, 0x6a, 0x6a, 0x46, 0x8d, 0xcb, 0xcb, 0xd9, 0x67, 0xbe, 0xbe, 0x4b, 0x72, 0x39, 0x39, 
    0xde, 0x94, 0x4a, 0x4a, 0xd4, 0x98, 0x4c, 0x4c, 0xe8, 0xb0, 0x58, 0x58, 0x4a, 0x85, 0xcf, 0xcf, 
    0x6b, 0xbb, 0xd0, 0xd0, 0x2a, 0xc5, 0xef, 0xef, 0xe5, 0x4f, 0xaa, 0xaa, 0x16, 0xed, 0xfb, 0xfb, 
    0xc5, 0x86, 0x43, 0x43, 0xd7, 0x9a, 0x4d, 0x4d, 0x55, 0x66, 0x33, 0x33, 0x94, 0x11, 0x85, 0x85, 
    0xcf, 0x8a, 0x45, 0x45, 0x10, 0xe9, 0xf9, 0xf9, 0x06, 0x04, 0x02, 0x02, 0x81, 0xfe, 0x7f, 0x7f, 
    0xf0, 0xa0, 0x50, 0x50, 0x44, 0x78, 0x3c, 0x3c, 0xba, 0x25, 0x9f, 0x9f, 0xe3, 0x4b, 0xa8, 0xa8, 
    0xf3, 0xa2, 0x51, 0x51, 0xfe, 0x5d, 0xa3, 0xa3, 0xc0, 0x80, 0x40, 0x40, 0x8a, 0x05, 0x8f, 0x8f, 
    0xad, 0x3f, 0x92, 0x92, 0xbc, 0x21, 0x9d, 0x9d, 0x48, 0x70, 0x38, 0x38, 0x04, 0xf1, 0xf5, 0xf5, 
    0xdf, 0x63, 0xbc, 0xbc, 0xc1, 0x77, 0xb6, 0xb6, 0x75, 0xaf, 0xda, 0xda, 0x63, 0x42, 0x21, 0x21, 
    0x30, 0x20, 0x10, 0x10, 0x1a, 0xe5, 0xff, 0xff, 0x0e, 0xfd, 0xf3, 0xf3, 0x6d, 0xbf, 0xd2, 0xd2, 
    0x4c, 0x81, 0xcd, 0xcd, 0x14, 0x18, 0x0c, 0x0c, 0x35, 0x26, 0x13, 0x13, 0x2f, 0xc3, 0xec, 0xec, 
    0xe1, 0xbe, 0x5f, 0x5f, 0xa2, 0x35, 0x97, 0x97, 0xcc, 0x88, 0x44, 0x44, 0x39, 0x2e, 0x17, 0x17, 
    0x57, 0x93, 0xc4, 0xc4, 0xf2, 0x55, 0xa7, 0xa7, 0x82, 0xfc, 0x7e, 0x7e, 0x47, 0x7a, 0x3d, 0x3d, 
    0xac, 0xc8, 0x64, 0x64, 0xe7, 0xba, 0x5d, 0x5d, 0x2b, 0x32, 0x19, 0x19, 0x95, 0xe6, 0x73, 0x73, 
    0xa0, 0xc0, 0x60, 0x60, 0x98, 0x19, 0x81, 0x81, 0xd1, 0x9e, 0x4f, 0x4f, 0x7f, 0xa3, 0xdc, 0xdc, 
    0x66, 0x44, 0x22, 0x22, 0x7e, 0x54, 0x2a, 0x2a, 0xab, 0x3b, 0x90, 0x90, 0x83, 0x0b, 0x88, 0x88, 
    0xca, 0x8c, 0x46, 0x46, 0x29, 0xc7, 0xee, 0xee, 0xd3, 0x6b, 0xb8, 0xb8, 0x3c, 0x28, 0x14, 0x14, 
    0x79, 0xa7, 0xde, 0xde, 0xe2, 0xbc, 0x5e, 0x5e, 0x1d, 0x16, 0x0b, 0x0b, 0x76, 0xad, 0xdb, 0xdb, 
    0x3b, 0xdb, 0xe0, 0xe0, 0x56, 0x64, 0x32, 0x32, 0x4e, 0x74, 0x3a, 0x3a, 0x1e, 0x14, 0x0a, 0x0a, 
    0xdb, 0x92, 0x49, 0x49, 0x0a, 0x0c, 0x06, 0x06, 0x6c, 0x48, 0x24, 0x24, 0xe4, 0xb8, 0x5c, 0x5c, 
    0x5d, 0x9f, 0xc2, 0xc2, 0x6e, 0xbd, 0xd3, 0xd3, 0xef, 0x43, 0xac, 0xac, 0xa6, 0xc4, 0x62, 0x62, 
    0xa8, 0x39, 0x91, 0x91, 0xa4, 0x31, 0x95, 0x95, 0x37, 0xd3, 0xe4, 0xe4, 0x8b, 0xf2, 0x79, 0x79, 
    0x32, 0xd5, 0xe7, 0xe7, 0x43, 0x8b, 0xc8, 0xc8, 0x59, 0x6e, 0x37, 0x37, 0xb7, 0xda, 0x6d, 0x6d, 
    0x8c, 0x01, 0x8d, 0x8d, 0x64, 0xb1, 0xd5, 0xd5, 0xd2, 0x9c, 0x4e, 0x4e, 0xe0, 0x49, 0xa9, 0xa9, 
    0xb4, 0xd8, 0x6c, 0x6c, 0xfa, 0xac, 0x56, 0x56, 0x07, 0xf3, 0xf4, 0xf4, 0x25, 0xcf, 0xea, 0xea, 
    0xaf, 0xca, 0x65, 0x65, 0x8e, 0xf4, 0x7a, 0x7a, 0xe9, 0x47, 0xae, 0xae, 0x18, 0x10, 0x08, 0x08, 
    0xd5, 0x6f, 0xba, 0xba, 0x88, 0xf0, 0x78, 0x78, 0x6f, 0x4a, 0x25, 0x25, 0x72, 0x5c, 0x2e, 0x2e, 
    0x24, 0x38, 0x1c, 0x1c, 0xf1, 0x57, 0xa6, 0xa6, 0xc7, 0x73, 0xb4, 0xb4, 0x51, 0x97, 0xc6, 0xc6, 
    0x23, 0xcb, 0xe8, 0xe8, 0x7c, 0xa1, 0xdd, 0xdd, 0x9c, 0xe8, 0x74, 0x74, 0x21, 0x3e, 0x1f, 0x1f, 
    0xdd, 0x96, 0x4b, 0x4b, 0xdc, 0x61, 0xbd, 0xbd, 0x86, 0x0d, 0x8b, 0x8b, 0x85, 0x0f, 0x8a, 0x8a, 
    0x90, 0xe0, 0x70, 0x70, 0x42, 0x7c, 0x3e, 0x3e, 0xc4, 0x71, 0xb5, 0xb5, 0xaa, 0xcc, 0x66, 0x66, 
    0xd8, 0x90, 0x48, 0x48, 0x05, 0x06, 0x03, 0x03, 0x01, 0xf7, 0xf6, 0xf6, 0x12, 0x1c, 0x0e, 0x0e, 
    0xa3, 0xc2, 0x61, 0x61, 0x5f, 0x6a, 0x35, 0x35, 0xf9, 0xae, 0x57, 0x57, 0xd0, 0x69, 0xb9, 0xb9,
    0x91, 0x17, 0x86, 0x86, 0x58, 0x99, 0xc1, 0xc1, 0x27, 0x3a, 0x1d, 0x1d, 0xb9, 0x27, 0x9e, 0x9e, 
    0x38, 0xd9, 0xe1, 0xe1, 0x13, 0xeb, 0xf8, 0xf8, 0xb3, 0x2b, 0x98, 0x98, 0x33, 0x22, 0x11, 0x11, 
    0xbb, 0xd2, 0x69, 0x69, 0x70, 0xa9, 0xd9, 0xd9, 0x89, 0x07, 0x8e, 0x8e, 0xa7, 0x33, 0x94, 0x94, 
    0xb6, 0x2d, 0x9b, 0x9b, 0x22, 0x3c, 0x1e, 0x1e, 0x92, 0x15, 0x87, 0x87, 0x20, 0xc9, 0xe9, 0xe9, 
    0x49, 0x87, 0xce, 0xce, 0xff, 0xaa, 0x55, 0x55, 0x78, 0x50, 0x28, 0x28, 0x7a, 0xa5, 0xdf, 0xdf, 
    0x8f, 0x03, 0x8c, 0x8c, 0xf8, 0x59, 0xa1, 0xa1, 0x80, 0x09, 0x89, 0x89, 0x17, 0x1a, 0x0d, 0x0d, 
    0xda, 0x65, 0xbf, 0xbf, 0x31, 0xd7, 0xe6, 0xe6, 0xc6, 0x84, 0x42, 0x42, 0xb8, 0xd0, 0x68, 0x68, 
    0xc3, 0x82, 0x41, 0x41, 0xb0, 0x29, 0x99, 0x99, 0x77, 0x5a, 0x2d, 0x2d, 0x11, 0x1e, 0x0f, 0x0f, 
    0xcb, 0x7b, 0xb0, 0xb0, 0xfc, 0xa8, 0x54, 0x54, 0xd6, 0x6d, 0xbb, 0xbb, 0x3a, 0x2c, 0x16, 0x16
];

static S_BOX_P3: [u8; 1024] = [
    0x63, 0xa5, 0xc6, 0x63, 0x7c, 0x84, 0xf8, 0x7c, 0x77, 0x99, 0xee, 0x77, 0x7b, 0x8d, 0xf6, 0x7b, 
    0xf2, 0x0d, 0xff, 0xf2, 0x6b, 0xbd, 0xd6, 0x6b, 0x6f, 0xb1, 0xde, 0x6f, 0xc5, 0x54, 0x91, 0xc5, 
    0x30, 0x50, 0x60, 0x30, 0x01, 0x03, 0x02, 0x01, 0x67, 0xa9, 0xce, 0x67, 0x2b, 0x7d, 0x56, 0x2b, 
    0xfe, 0x19, 0xe7, 0xfe, 0xd7, 0x62, 0xb5, 0xd7, 0xab, 0xe6, 0x4d, 0xab, 0x76, 0x9a, 0xec, 0x76, 
    0xca, 0x45, 0x8f, 0xca, 0x82, 0x9d, 0x1f, 0x82, 0xc9, 0x40, 0x89, 0xc9, 0x7d, 0x87, 0xfa, 0x7d, 
    0xfa, 0x15, 0xef, 0xfa, 0x59, 0xeb, 0xb2, 0x59, 0x47, 0xc9, 0x8e, 0x47, 0xf0, 0x0b, 0xfb, 0xf0, 
    0xad, 0xec, 0x41, 0xad, 0xd4, 0x67, 0xb3, 0xd4, 0xa2, 0xfd, 0x5f, 0xa2, 0xaf, 0xea, 0x45, 0xaf, 
    0x9c, 0xbf, 0x23, 0x9c, 0xa4, 0xf7, 0x53, 0xa4, 0x72, 0x96, 0xe4, 0x72, 0xc0, 0x5b, 0x9b, 0xc0, 
    0xb7, 0xc2, 0x75, 0xb7, 0xfd, 0x1c, 0xe1, 0xfd, 0x93, 0xae, 0x3d, 0x93, 0x26, 0x6a, 0x4c, 0x26, 
    0x36, 0x5a, 0x6c, 0x36, 0x3f, 0x41, 0x7e, 0x3f, 0xf7, 0x02, 0xf5, 0xf7, 0xcc, 0x4f, 0x83, 0xcc, 
    0x34, 0x5c, 0x68, 0x34, 0xa5, 0xf4, 0x51, 0xa5, 0xe5, 0x34, 0xd1, 0xe5, 0xf1, 0x08, 0xf9, 0xf1, 
    0x71, 0x93, 0xe2, 0x71, 0xd8, 0x73, 0xab, 0xd8, 0x31, 0x53, 0x62, 0x31, 0x15, 0x3f, 0x2a, 0x15, 
    0x04, 0x0c, 0x08, 0x04, 0xc7, 0x52, 0x95, 0xc7, 0x23, 0x65, 0x46, 0x23, 0xc3, 0x5e, 0x9d, 0xc3, 
    0x18, 0x28, 0x30, 0x18, 0x96, 0xa1, 0x37, 0x96, 0x05, 0x0f, 0x0a, 0x05, 0x9a, 0xb5, 0x2f, 0x9a, 
    0x07, 0x09, 0x0e, 0x07, 0x12, 0x36, 0x24, 0x12, 0x80, 0x9b, 0x1b, 0x80, 0xe2, 0x3d, 0xdf, 0xe2, 
    0xeb, 0x26, 0xcd, 0xeb, 0x27, 0x69, 0x4e, 0x27, 0xb2, 0xcd, 0x7f, 0xb2, 0x75, 0x9f, 0xea, 0x75, 
    0x09, 0x1b, 0x12, 0x09, 0x83, 0x9e, 0x1d, 0x83, 0x2c, 0x74, 0x58, 0x2c, 0x1a, 0x2e, 0x34, 0x1a, 
    0x1b, 0x2d, 0x36, 0x1b, 0x6e, 0xb2, 0xdc, 0x6e, 0x5a, 0xee, 0xb4, 0x5a, 0xa0, 0xfb, 0x5b, 0xa0, 
    0x52, 0xf6, 0xa4, 0x52, 0x3b, 0x4d, 0x76, 0x3b, 0xd6, 0x61, 0xb7, 0xd6, 0xb3, 0xce, 0x7d, 0xb3, 
    0x29, 0x7b, 0x52, 0x29, 0xe3, 0x3e, 0xdd, 0xe3, 0x2f, 0x71, 0x5e, 0x2f, 0x84, 0x97, 0x13, 0x84, 
    0x53, 0xf5, 0xa6, 0x53, 0xd1, 0x68, 0xb9, 0xd1, 0x00, 0x00, 0x00, 0x00, 0xed, 0x2c, 0xc1, 0xed, 
    0x20, 0x60, 0x40, 0x20, 0xfc, 0x1f, 0xe3, 0xfc, 0xb1, 0xc8, 0x79, 0xb1, 0x5b, 0xed, 0xb6, 0x5b, 
    0x6a, 0xbe, 0xd4, 0x6a, 0xcb, 0x46, 0x8d, 0xcb, 0xbe, 0xd9, 0x67, 0xbe, 0x39, 0x4b, 0x72, 0x39, 
    0x4a, 0xde, 0x94, 0x4a, 0x4c, 0xd4, 0x98, 0x4c, 0x58, 0xe8, 0xb0, 0x58, 0xcf, 0x4a, 0x85, 0xcf, 
    0xd0, 0x6b, 0xbb, 0xd0, 0xef, 0x2a, 0xc5, 0xef, 0xaa, 0xe5, 0x4f, 0xaa, 0xfb, 0x16, 0xed, 0xfb, 
    0x43, 0xc5, 0x86, 0x43, 0x4d, 0xd7, 0x9a, 0x4d, 0x33, 0x55, 0x66, 0x33, 0x85, 0x94, 0x11, 0x85, 
    0x45, 0xcf, 0x8a, 0x45, 0xf9, 0x10, 0xe9, 0xf9, 0x02, 0x06, 0x04, 0x02, 0x7f, 0x81, 0xfe, 0x7f, 
    0x50, 0xf0, 0xa0, 0x50, 0x3c, 0x44, 0x78, 0x3c, 0x9f, 0xba, 0x25, 0x9f, 0xa8, 0xe3, 0x4b, 0xa8, 
    0x51, 0xf3, 0xa2, 0x51, 0xa3, 0xfe, 0x5d, 0xa3, 0x40, 0xc0, 0x80, 0x40, 0x8f, 0x8a, 0x05, 0x8f, 
    0x92, 0xad, 0x3f, 0x92, 0x9d, 0xbc, 0x21, 0x9d, 0x38, 0x48, 0x70, 0x38, 0xf5, 0x04, 0xf1, 0xf5, 
    0xbc, 0xdf, 0x63, 0xbc, 0xb6, 0xc1, 0x77, 0xb6, 0xda, 0x75, 0xaf, 0xda, 0x21, 0x63, 0x42, 0x21, 
    0x10, 0x30, 0x20, 0x10, 0xff, 0x1a, 0xe5, 0xff, 0xf3, 0x0e, 0xfd, 0xf3, 0xd2, 0x6d, 0xbf, 0xd2, 
    0xcd, 0x4c, 0x81, 0xcd, 0x0c, 0x14, 0x18, 0x0c, 0x13, 0x35, 0x26, 0x13, 0xec, 0x2f, 0xc3, 0xec, 
    0x5f, 0xe1, 0xbe, 0x5f, 0x97, 0xa2, 0x35, 0x97, 0x44, 0xcc, 0x88, 0x44, 0x17, 0x39, 0x2e, 0x17, 
    0xc4, 0x57, 0x93, 0xc4, 0xa7, 0xf2, 0x55, 0xa7, 0x7e, 0x82, 0xfc, 0x7e, 0x3d, 0x47, 0x7a, 0x3d, 
    0x64, 0xac, 0xc8, 0x64, 0x5d, 0xe7, 0xba, 0x5d, 0x19, 0x2b, 0x32, 0x19, 0x73, 0x95, 0xe6, 0x73, 
    0x60, 0xa0, 0xc0, 0x60, 0x81, 0x98, 0x19, 0x81, 0x4f, 0xd1, 0x9e, 0x4f, 0xdc, 0x7f, 0xa3, 0xdc, 
    0x22, 0x66, 0x44, 0x22, 0x2a, 0x7e, 0x54, 0x2a, 0x90, 0xab, 0x3b, 0x90, 0x88, 0x83, 0x0b, 0x88, 
    0x46, 0xca, 0x8c, 0x46, 0xee, 0x29, 0xc7, 0xee, 0xb8, 0xd3, 0x6b, 0xb8, 0x14, 0x3c, 0x28, 0x14, 
    0xde, 0x79, 0xa7, 0xde, 0x5e, 0xe2, 0xbc, 0x5e, 0x0b, 0x1d, 0x16, 0x0b, 0xdb, 0x76, 0xad, 0xdb, 
    0xe0, 0x3b, 0xdb, 0xe0, 0x32, 0x56, 0x64, 0x32, 0x3a, 0x4e, 0x74, 0x3a, 0x0a, 0x1e, 0x14, 0x0a, 
    0x49, 0xdb, 0x92, 0x49, 0x06, 0x0a, 0x0c, 0x06, 0x24, 0x6c, 0x48, 0x24, 0x5c, 0xe4, 0xb8, 0x5c, 
    0xc2, 0x5d, 0x9f, 0xc2, 0xd3, 0x6e, 0xbd, 0xd3, 0xac, 0xef, 0x43, 0xac, 0x62, 0xa6, 0xc4, 0x62, 
    0x91, 0xa8, 0x39, 0x91, 0x95, 0xa4, 0x31, 0x95, 0xe4, 0x37, 0xd3, 0xe4, 0x79, 0x8b, 0xf2, 0x79, 
    0xe7, 0x32, 0xd5, 0xe7, 0xc8, 0x43, 0x8b, 0xc8, 0x37, 0x59, 0x6e, 0x37, 0x6d, 0xb7, 0xda, 0x6d, 
    0x8d, 0x8c, 0x01, 0x8d, 0xd5, 0x64, 0xb1, 0xd5, 0x4e, 0xd2, 0x9c, 0x4e, 0xa9, 0xe0, 0x49, 0xa9, 
    0x6c, 0xb4, 0xd8, 0x6c, 0x56, 0xfa, 0xac, 0x56, 0xf4, 0x07, 0xf3, 0xf4, 0xea, 0x25, 0xcf, 0xea, 
    0x65, 0xaf, 0xca, 0x65, 0x7a, 0x8e, 0xf4, 0x7a, 0xae, 0xe9, 0x47, 0xae, 0x08, 0x18, 0x10, 0x08, 
    0xba, 0xd5, 0x6f, 0xba, 0x78, 0x88, 0xf0, 0x78, 0x25, 0x6f, 0x4a, 0x25, 0x2e, 0x72, 0x5c, 0x2e, 
    0x1c, 0x24, 0x38, 0x1c, 0xa6, 0xf1, 0x57, 0xa6, 0xb4, 0xc7, 0x73, 0xb4, 0xc6, 0x51, 0x97, 0xc6, 
    0xe8, 0x23, 0xcb, 0xe8, 0xdd, 0x7c, 0xa1, 0xdd, 0x74, 0x9c, 0xe8, 0x74, 0x1f, 0x21, 0x3e, 0x1f, 
    0x4b, 0xdd, 0x96, 0x4b, 0xbd, 0xdc, 0x61, 0xbd, 0x8b, 0x86, 0x0d, 0x8b, 0x8a, 0x85, 0x0f, 0x8a, 
    0x70, 0x90, 0xe0, 0x70, 0x3e, 0x42, 0x7c, 0x3e, 0xb5, 0xc4, 0x71, 0xb5, 0x66, 0xaa, 0xcc, 0x66, 
    0x48, 0xd8, 0x90, 0x48, 0x03, 0x05, 0x06, 0x03, 0xf6, 0x01, 0xf7, 0xf6, 0x0e, 0x12, 0x1c, 0x0e, 
    0x61, 0xa3, 0xc2, 0x61, 0x35, 0x5f, 0x6a, 0x35, 0x57, 0xf9, 0xae, 0x57, 0xb9, 0xd0, 0x69, 0xb9, 
    0x86, 0x91, 0x17, 0x86, 0xc1, 0x58, 0x99, 0xc1, 0x1d, 0x27, 0x3a, 0x1d, 0x9e, 0xb9, 0x27, 0x9e, 
    0xe1, 0x38, 0xd9, 0xe1, 0xf8, 0x13, 0xeb, 0xf8, 0x98, 0xb3, 0x2b, 0x98, 0x11, 0x33, 0x22, 0x11, 
    0x69, 0xbb, 0xd2, 0x69, 0xd9, 0x70, 0xa9, 0xd9, 0x8e, 0x89, 0x07, 0x8e, 0x94, 0xa7, 0x33, 0x94, 
    0x9b, 0xb6, 0x2d, 0x9b, 0x1e, 0x22, 0x3c, 0x1e, 0x87, 0x92, 0x15, 0x87, 0xe9, 0x20, 0xc9, 0xe9, 
    0xce, 0x49, 0x87, 0xce, 0x55, 0xff, 0xaa, 0x55, 0x28, 0x78, 0x50, 0x28, 0xdf, 0x7a, 0xa5, 0xdf, 
    0x8c, 0x8f, 0x03, 0x8c, 0xa1, 0xf8, 0x59, 0xa1, 0x89, 0x80, 0x09, 0x89, 0x0d, 0x17, 0x1a, 0x0d, 
    0xbf, 0xda, 0x65, 0xbf, 0xe6, 0x31, 0xd7, 0xe6, 0x42, 0xc6, 0x84, 0x42, 0x68, 0xb8, 0xd0, 0x68, 
    0x41, 0xc3, 0x82, 0x41, 0x99, 0xb0, 0x29, 0x99, 0x2d, 0x77, 0x5a, 0x2d, 0x0f, 0x11, 0x1e, 0x0f, 
    0xb0, 0xcb, 0x7b, 0xb0, 0x54, 0xfc, 0xa8, 0x54, 0xbb, 0xd6, 0x6d, 0xbb, 0x16, 0x3a, 0x2c, 0x16
];

static S_BOX_P4: [u8; 1024] = [
    0x63, 0x63, 0xa5, 0xc6, 0x7c, 0x7c, 0x84, 0xf8, 0x77, 0x77, 0x99, 0xee, 0x7b, 0x7b, 0x8d, 0xf6, 
    0xf2, 0xf2, 0x0d, 0xff, 0x6b, 0x6b, 0xbd, 0xd6, 0x6f, 0x6f, 0xb1, 0xde, 0xc5, 0xc5, 0x54, 0x91, 
    0x30, 0x30, 0x50, 0x60, 0x01, 0x01, 0x03, 0x02, 0x67, 0x67, 0xa9, 0xce, 0x2b, 0x2b, 0x7d, 0x56, 
    0xfe, 0xfe, 0x19, 0xe7, 0xd7, 0xd7, 0x62, 0xb5, 0xab, 0xab, 0xe6, 0x4d, 0x76, 0x76, 0x9a, 0xec, 
    0xca, 0xca, 0x45, 0x8f, 0x82, 0x82, 0x9d, 0x1f, 0xc9, 0xc9, 0x40, 0x89, 0x7d, 0x7d, 0x87, 0xfa, 
    0xfa, 0xfa, 0x15, 0xef, 0x59, 0x59, 0xeb, 0xb2, 0x47, 0x47, 0xc9, 0x8e, 0xf0, 0xf0, 0x0b, 0xfb, 
    0xad, 0xad, 0xec, 0x41, 0xd4, 0xd4, 0x67, 0xb3, 0xa2, 0xa2, 0xfd, 0x5f, 0xaf, 0xaf, 0xea, 0x45, 
    0x9c, 0x9c, 0xbf, 0x23, 0xa4, 0xa4, 0xf7, 0x53, 0x72, 0x72, 0x96, 0xe4, 0xc0, 0xc0, 0x5b, 0x9b, 
    0xb7, 0xb7, 0xc2, 0x75, 0xfd, 0xfd, 0x1c, 0xe1, 0x93, 0x93, 0xae, 0x3d, 0x26, 0x26, 0x6a, 0x4c, 
    0x36, 0x36, 0x5a, 0x6c, 0x3f, 0x3f, 0x41, 0x7e, 0xf7, 0xf7, 0x02, 0xf5, 0xcc, 0xcc, 0x4f, 0x83, 
    0x34, 0x34, 0x5c, 0x68, 0xa5, 0xa5, 0xf4, 0x51, 0xe5, 0xe5, 0x34, 0xd1, 0xf1, 0xf1, 0x08, 0xf9, 
    0x71, 0x71, 0x93, 0xe2, 0xd8, 0xd8, 0x73, 0xab, 0x31, 0x31, 0x53, 0x62, 0x15, 0x15, 0x3f, 0x2a, 
    0x04, 0x04, 0x0c, 0x08, 0xc7, 0xc7, 0x52, 0x95, 0x23, 0x23, 0x65, 0x46, 0xc3, 0xc3, 0x5e, 0x9d, 
    0x18, 0x18, 0x28, 0x30, 0x96, 0x96, 0xa1, 0x37, 0x05, 0x05, 0x0f, 0x0a, 0x9a, 0x9a, 0xb5, 0x2f, 
    0x07, 0x07, 0x09, 0x0e, 0x12, 0x12, 0x36, 0x24, 0x80, 0x80, 0x9b, 0x1b, 0xe2, 0xe2, 0x3d, 0xdf, 
    0xeb, 0xeb, 0x26, 0xcd, 0x27, 0x27, 0x69, 0x4e, 0xb2, 0xb2, 0xcd, 0x7f, 0x75, 0x75, 0x9f, 0xea, 
    0x09, 0x09, 0x1b, 0x12, 0x83, 0x83, 0x9e, 0x1d, 0x2c, 0x2c, 0x74, 0x58, 0x1a, 0x1a, 0x2e, 0x34, 
    0x1b, 0x1b, 0x2d, 0x36, 0x6e, 0x6e, 0xb2, 0xdc, 0x5a, 0x5a, 0xee, 0xb4, 0xa0, 0xa0, 0xfb, 0x5b, 
    0x52, 0x52, 0xf6, 0xa4, 0x3b, 0x3b, 0x4d, 0x76, 0xd6, 0xd6, 0x61, 0xb7, 0xb3, 0xb3, 0xce, 0x7d, 
    0x29, 0x29, 0x7b, 0x52, 0xe3, 0xe3, 0x3e, 0xdd, 0x2f, 0x2f, 0x71, 0x5e, 0x84, 0x84, 0x97, 0x13, 
    0x53, 0x53, 0xf5, 0xa6, 0xd1, 0xd1, 0x68, 0xb9, 0x00, 0x00, 0x00, 0x00, 0xed, 0xed, 0x2c, 0xc1, 
    0x20, 0x20, 0x60, 0x40, 0xfc, 0xfc, 0x1f, 0xe3, 0xb1, 0xb1, 0xc8, 0x79, 0x5b, 0x5b, 0xed, 0xb6, 
    0x6a, 0x6a, 0xbe, 0xd4, 0xcb, 0xcb, 0x46, 0x8d, 0xbe, 0xbe, 0xd9, 0x67, 0x39, 0x39, 0x4b, 0x72, 
    0x4a, 0x4a, 0xde, 0x94, 0x4c, 0x4c, 0xd4, 0x98, 0x58, 0x58, 0xe8, 0xb0, 0xcf, 0xcf, 0x4a, 0x85, 
    0xd0, 0xd0, 0x6b, 0xbb, 0xef, 0xef, 0x2a, 0xc5, 0xaa, 0xaa, 0xe5, 0x4f, 0xfb, 0xfb, 0x16, 0xed, 
    0x43, 0x43, 0xc5, 0x86, 0x4d, 0x4d, 0xd7, 0x9a, 0x33, 0x33, 0x55, 0x66, 0x85, 0x85, 0x94, 0x11, 
    0x45, 0x45, 0xcf, 0x8a, 0xf9, 0xf9, 0x10, 0xe9, 0x02, 0x02, 0x06, 0x04, 0x7f, 0x7f, 0x81, 0xfe, 
    0x50, 0x50, 0xf0, 0xa0, 0x3c, 0x3c, 0x44, 0x78, 0x9f, 0x9f, 0xba, 0x25, 0xa8, 0xa8, 0xe3, 0x4b, 
    0x51, 0x51, 0xf3, 0xa2, 0xa3, 0xa3, 0xfe, 0x5d, 0x40, 0x40, 0xc0, 0x80, 0x8f, 0x8f, 0x8a, 0x05, 
    0x92, 0x92, 0xad, 0x3f, 0x9d, 0x9d, 0xbc, 0x21, 0x38, 0x38, 0x48, 0x70, 0xf5, 0xf5, 0x04, 0xf1, 
    0xbc, 0xbc, 0xdf, 0x63, 0xb6, 0xb6, 0xc1, 0x77, 0xda, 0xda, 0x75, 0xaf, 0x21, 0x21, 0x63, 0x42, 
    0x10, 0x10, 0x30, 0x20, 0xff, 0xff, 0x1a, 0xe5, 0xf3, 0xf3, 0x0e, 0xfd, 0xd2, 0xd2, 0x6d, 0xbf,
    0xcd, 0xcd, 0x4c, 0x81, 0x0c, 0x0c, 0x14, 0x18, 0x13, 0x13, 0x35, 0x26, 0xec, 0xec, 0x2f, 0xc3, 
    0x5f, 0x5f, 0xe1, 0xbe, 0x97, 0x97, 0xa2, 0x35, 0x44, 0x44, 0xcc, 0x88, 0x17, 0x17, 0x39, 0x2e, 
    0xc4, 0xc4, 0x57, 0x93, 0xa7, 0xa7, 0xf2, 0x55, 0x7e, 0x7e, 0x82, 0xfc, 0x3d, 0x3d, 0x47, 0x7a, 
    0x64, 0x64, 0xac, 0xc8, 0x5d, 0x5d, 0xe7, 0xba, 0x19, 0x19, 0x2b, 0x32, 0x73, 0x73, 0x95, 0xe6, 
    0x60, 0x60, 0xa0, 0xc0, 0x81, 0x81, 0x98, 0x19, 0x4f, 0x4f, 0xd1, 0x9e, 0xdc, 0xdc, 0x7f, 0xa3, 
    0x22, 0x22, 0x66, 0x44, 0x2a, 0x2a, 0x7e, 0x54, 0x90, 0x90, 0xab, 0x3b, 0x88, 0x88, 0x83, 0x0b, 
    0x46, 0x46, 0xca, 0x8c, 0xee, 0xee, 0x29, 0xc7, 0xb8, 0xb8, 0xd3, 0x6b, 0x14, 0x14, 0x3c, 0x28, 
    0xde, 0xde, 0x79, 0xa7, 0x5e, 0x5e, 0xe2, 0xbc, 0x0b, 0x0b, 0x1d, 0x16, 0xdb, 0xdb, 0x76, 0xad, 
    0xe0, 0xe0, 0x3b, 0xdb, 0x32, 0x32, 0x56, 0x64, 0x3a, 0x3a, 0x4e, 0x74, 0x0a, 0x0a, 0x1e, 0x14, 
    0x49, 0x49, 0xdb, 0x92, 0x06, 0x06, 0x0a, 0x0c, 0x24, 0x24, 0x6c, 0x48, 0x5c, 0x5c, 0xe4, 0xb8, 
    0xc2, 0xc2, 0x5d, 0x9f, 0xd3, 0xd3, 0x6e, 0xbd, 0xac, 0xac, 0xef, 0x43, 0x62, 0x62, 0xa6, 0xc4, 
    0x91, 0x91, 0xa8, 0x39, 0x95, 0x95, 0xa4, 0x31, 0xe4, 0xe4, 0x37, 0xd3, 0x79, 0x79, 0x8b, 0xf2, 
    0xe7, 0xe7, 0x32, 0xd5, 0xc8, 0xc8, 0x43, 0x8b, 0x37, 0x37, 0x59, 0x6e, 0x6d, 0x6d, 0xb7, 0xda, 
    0x8d, 0x8d, 0x8c, 0x01, 0xd5, 0xd5, 0x64, 0xb1, 0x4e, 0x4e, 0xd2, 0x9c, 0xa9, 0xa9, 0xe0, 0x49, 
    0x6c, 0x6c, 0xb4, 0xd8, 0x56, 0x56, 0xfa, 0xac, 0xf4, 0xf4, 0x07, 0xf3, 0xea, 0xea, 0x25, 0xcf, 
    0x65, 0x65, 0xaf, 0xca, 0x7a, 0x7a, 0x8e, 0xf4, 0xae, 0xae, 0xe9, 0x47, 0x08, 0x08, 0x18, 0x10, 
    0xba, 0xba, 0xd5, 0x6f, 0x78, 0x78, 0x88, 0xf0, 0x25, 0x25, 0x6f, 0x4a, 0x2e, 0x2e, 0x72, 0x5c, 
    0x1c, 0x1c, 0x24, 0x38, 0xa6, 0xa6, 0xf1, 0x57, 0xb4, 0xb4, 0xc7, 0x73, 0xc6, 0xc6, 0x51, 0x97, 
    0xe8, 0xe8, 0x23, 0xcb, 0xdd, 0xdd, 0x7c, 0xa1, 0x74, 0x74, 0x9c, 0xe8, 0x1f, 0x1f, 0x21, 0x3e, 
    0x4b, 0x4b, 0xdd, 0x96, 0xbd, 0xbd, 0xdc, 0x61, 0x8b, 0x8b, 0x86, 0x0d, 0x8a, 0x8a, 0x85, 0x0f, 
    0x70, 0x70, 0x90, 0xe0, 0x3e, 0x3e, 0x42, 0x7c, 0xb5, 0xb5, 0xc4, 0x71, 0x66, 0x66, 0xaa, 0xcc, 
    0x48, 0x48, 0xd8, 0x90, 0x03, 0x03, 0x05, 0x06, 0xf6, 0xf6, 0x01, 0xf7, 0x0e, 0x0e, 0x12, 0x1c, 
    0x61, 0x61, 0xa3, 0xc2, 0x35, 0x35, 0x5f, 0x6a, 0x57, 0x57, 0xf9, 0xae, 0xb9, 0xb9, 0xd0, 0x69, 
    0x86, 0x86, 0x91, 0x17, 0xc1, 0xc1, 0x58, 0x99, 0x1d, 0x1d, 0x27, 0x3a, 0x9e, 0x9e, 0xb9, 0x27, 
    0xe1, 0xe1, 0x38, 0xd9, 0xf8, 0xf8, 0x13, 0xeb, 0x98, 0x98, 0xb3, 0x2b, 0x11, 0x11, 0x33, 0x22, 
    0x69, 0x69, 0xbb, 0xd2, 0xd9, 0xd9, 0x70, 0xa9, 0x8e, 0x8e, 0x89, 0x07, 0x94, 0x94, 0xa7, 0x33, 
    0x9b, 0x9b, 0xb6, 0x2d, 0x1e, 0x1e, 0x22, 0x3c, 0x87, 0x87, 0x92, 0x15, 0xe9, 0xe9, 0x20, 0xc9, 
    0xce, 0xce, 0x49, 0x87, 0x55, 0x55, 0xff, 0xaa, 0x28, 0x28, 0x78, 0x50, 0xdf, 0xdf, 0x7a, 0xa5, 
    0x8c, 0x8c, 0x8f, 0x03, 0xa1, 0xa1, 0xf8, 0x59, 0x89, 0x89, 0x80, 0x09, 0x0d, 0x0d, 0x17, 0x1a, 
    0xbf, 0xbf, 0xda, 0x65, 0xe6, 0xe6, 0x31, 0xd7, 0x42, 0x42, 0xc6, 0x84, 0x68, 0x68, 0xb8, 0xd0, 
    0x41, 0x41, 0xc3, 0x82, 0x99, 0x99, 0xb0, 0x29, 0x2d, 0x2d, 0x77, 0x5a, 0x0f, 0x0f, 0x11, 0x1e, 
    0xb0, 0xb0, 0xcb, 0x7b, 0x54, 0x54, 0xfc, 0xa8, 0xbb, 0xbb, 0xd6, 0x6d, 0x16, 0x16, 0x3a, 0x2c
];

static S_BOX_INV: [u8; 256] = [
    0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
    0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
    0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
    0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
    0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
    0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
    0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
    0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
    0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
    0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
    0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
    0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
    0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
    0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
    0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
    0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d
];

static RCON: [u8; 15] = [
    0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d
];

const AES_128_KEY_LEN: usize = 16;
const AES_192_KEY_LEN: usize = 24;
const AES_256_KEY_LEN: usize = 32;

const AES_128_NK: usize      = 4;
const AES_192_NK: usize      = 6;
const AES_256_NK: usize      = 8;

const AES_128_NB: usize      = 4;
const AES_192_NB: usize      = 4;
const AES_256_NB: usize      = 4;

const AES_128_NR: usize      = 10;
const AES_192_NR: usize      = 12;
const AES_256_NR: usize      = 14;

fn double_on_gf(a: u64) -> u64 {
    let b: u64 = a & 0x8080808080808080;
    return ((a & 0x7f7f7f7f7f7f7f7f) << 1) ^ (b >> 3) ^ (b >> 4) ^ (b >> 6) ^ (b >> 7);
}

pub unsafe fn aes_key_expansion(key: *const u8, expanded_key: *mut u8, nk: usize) {

    let k: *const u32 = key as *const u32;
    let w: *mut u32   = expanded_key as *mut u32;
    let mut wt: u32   = 0;
    let t: *mut u8    = (&wt as *const u32) as *mut u8;

    let mut i: usize = 0;
    loop {
        *w.add(i) = *k.add(i);
        i = i + 1;
        if !(i < nk) {
            break;
        }
    }

    let n: usize = (nk + 7) << 2;
    loop {
 
        wt = *w.add(i - 1);

        if i % nk == 0 {

            // RotWord o SubWord
            let temp  = *t.add(0);
            *t.add(0) = S_BOX[*t.add(1) as usize];
            *t.add(1) = S_BOX[*t.add(2) as usize];
            *t.add(2) = S_BOX[*t.add(3) as usize];
            *t.add(3) = S_BOX[temp      as usize];

            *t.add(0) = *t.add(0) ^ RCON[i / nk];

        } else if nk > 6 && i % nk == 4 {

            // SubWord
            *t.add(0) = S_BOX[*t.add(0) as usize];
            *t.add(1) = S_BOX[*t.add(1) as usize];
            *t.add(2) = S_BOX[*t.add(2) as usize];
            *t.add(3) = S_BOX[*t.add(3) as usize];

        }

        *w.add(i) = *w.add(i - nk) ^ wt;
        i = i + 1;

        if !(i < n) {
            break;
        }
    
    }

}

// Cipher
pub unsafe fn aes_cipher(expanded_key: *const u8, block_in: *const u8, block_out: *mut u8,
    nr: usize) {

    let mut state: [u8; 16] = [0; 16];
    let state_u64: *mut u64 = state.as_ptr() as *mut u64;
    let mut rk: *mut u64    = expanded_key as *mut u64;
    let mut x1_u64: u64     = 0;
    let mut x2_u64: u64     = 0;
    let mut x3_u64: u64     = 0;
    let x1: *mut u8         = (&x1_u64 as *const u64) as *mut u8;
    let x2: *mut u8         = (&x2_u64 as *const u64) as *mut u8;
    let x3: *mut u8         = (&x3_u64 as *const u64) as *mut u8;

    // AddRoundKey
    *state_u64.add(0) = *(block_in as *const u64).add(0) ^ *rk.add(0);
    *state_u64.add(1) = *(block_in as *const u64).add(1) ^ *rk.add(1);
    rk = rk.add(2);

    let mut r: usize = 0;
    loop {
        
        // SubBytes
        state[0]  = S_BOX[state[0]  as usize];
        state[1]  = S_BOX[state[1]  as usize];
        state[2]  = S_BOX[state[2]  as usize];
        state[3]  = S_BOX[state[3]  as usize];
        state[4]  = S_BOX[state[4]  as usize];
        state[5]  = S_BOX[state[5]  as usize];
        state[6]  = S_BOX[state[6]  as usize];
        state[7]  = S_BOX[state[7]  as usize];
        state[8]  = S_BOX[state[8]  as usize];
        state[9]  = S_BOX[state[9]  as usize];
        state[10] = S_BOX[state[10] as usize];
        state[11] = S_BOX[state[11] as usize];
        state[12] = S_BOX[state[12] as usize];
        state[13] = S_BOX[state[13] as usize];
        state[14] = S_BOX[state[14] as usize];
        state[15] = S_BOX[state[15] as usize];

        // ShiftRows
        let temp  = state[1];
        state[1]  = state[5];
        state[5]  = state[9];
        state[9]  = state[13];
        state[13] = temp;
        let temp  = state[2];
        state[2]  = state[10];
        state[10] = temp;
        let temp  = state[6];
        state[6]  = state[14];
        state[14] = temp;
        let temp  = state[15];
        state[15] = state[11];
        state[11] = state[7];
        state[7]  = state[3];
        state[3]  = temp;
        
        r = r + 1;

        if r >= nr {
            break;
        }

        // MixColumns
        x1_u64 = *state_u64.add(0);
        x2_u64 = double_on_gf(x1_u64);
        x3_u64 = x1_u64 ^ x2_u64;

        state[0]  = *x2.add(0) ^ *x3.add(1) ^ *x1.add(2) ^ *x1.add(3);
        state[1]  = *x1.add(0) ^ *x2.add(1) ^ *x3.add(2) ^ *x1.add(3);
        state[2]  = *x1.add(0) ^ *x1.add(1) ^ *x2.add(2) ^ *x3.add(3);
        state[3]  = *x3.add(0) ^ *x1.add(1) ^ *x1.add(2) ^ *x2.add(3);

        state[4]  = *x2.add(4) ^ *x3.add(5) ^ *x1.add(6) ^ *x1.add(7);
        state[5]  = *x1.add(4) ^ *x2.add(5) ^ *x3.add(6) ^ *x1.add(7);
        state[6]  = *x1.add(4) ^ *x1.add(5) ^ *x2.add(6) ^ *x3.add(7);
        state[7]  = *x3.add(4) ^ *x1.add(5) ^ *x1.add(6) ^ *x2.add(7);

        x1_u64 = *state_u64.add(1);
        x2_u64 = double_on_gf(x1_u64);
        x3_u64 = x1_u64 ^ x2_u64;
        
        state[8]  = *x2.add(0) ^ *x3.add(1) ^ *x1.add(2) ^ *x1.add(3);
        state[9]  = *x1.add(0) ^ *x2.add(1) ^ *x3.add(2) ^ *x1.add(3);
        state[10] = *x1.add(0) ^ *x1.add(1) ^ *x2.add(2) ^ *x3.add(3);
        state[11] = *x3.add(0) ^ *x1.add(1) ^ *x1.add(2) ^ *x2.add(3);

        state[12] = *x2.add(4) ^ *x3.add(5) ^ *x1.add(6) ^ *x1.add(7);
        state[13] = *x1.add(4) ^ *x2.add(5) ^ *x3.add(6) ^ *x1.add(7);
        state[14] = *x1.add(4) ^ *x1.add(5) ^ *x2.add(6) ^ *x3.add(7);
        state[15] = *x3.add(4) ^ *x1.add(5) ^ *x1.add(6) ^ *x2.add(7);

        // AddRoundKey
        *state_u64.add(0) = *state_u64.add(0) ^ *rk.add(0);
        *state_u64.add(1) = *state_u64.add(1) ^ *rk.add(1);
        rk = rk.add(2);

    }
    
    // AddRoundKey
    *(block_out as *mut u64).add(0) = *state_u64.add(0) ^ *rk.add(0);
    *(block_out as *mut u64).add(1) = *state_u64.add(1) ^ *rk.add(1);

}

// InvCipher
pub unsafe fn aes_inv_cipher(expanded_key: *const u8, block_in: *const u8, block_out: *mut u8,
    nr: usize) {

    let mut state: [u8; 16] = [0; 16];
    let state_u64: *mut u64 = state.as_ptr() as *mut u64;
    let mut rk: *mut u64    = (expanded_key as *mut u64).add(nr << 1);
    let mut x9_u64: u64     = 0;
    let mut xb_u64: u64     = 0;
    let mut xd_u64: u64     = 0;
    let mut xe_u64: u64     = 0;
    let x9: *mut u8         = (&x9_u64 as *const u64) as *mut u8;
    let xb: *mut u8         = (&xb_u64 as *const u64) as *mut u8;
    let xd: *mut u8         = (&xd_u64 as *const u64) as *mut u8;
    let xe: *mut u8         = (&xe_u64 as *const u64) as *mut u8;

    // AddRoundKey
    *state_u64.add(0) = *(block_in as *const u64).add(0) ^ *rk.add(0);
    *state_u64.add(1) = *(block_in as *const u64).add(1) ^ *rk.add(1);
    rk = rk.sub(2);

    let mut r: usize = 0;
    loop {
        
        // InvShiftRows
        let temp  = state[1];
        state[1]  = state[13];
        state[13] = state[9];
        state[9]  = state[5];
        state[5]  = temp;
        let temp  = state[2];
        state[2]  = state[10];
        state[10] = temp;
        let temp  = state[6];
        state[6]  = state[14];
        state[14] = temp;
        let temp  = state[3];
        state[3]  = state[7];
        state[7]  = state[11];
        state[11] = state[15];
        state[15] = temp;

        // InvSubBytes
        state[0]  = S_BOX_INV[state[0]  as usize];
        state[1]  = S_BOX_INV[state[1]  as usize];
        state[2]  = S_BOX_INV[state[2]  as usize];
        state[3]  = S_BOX_INV[state[3]  as usize];
        state[4]  = S_BOX_INV[state[4]  as usize];
        state[5]  = S_BOX_INV[state[5]  as usize];
        state[6]  = S_BOX_INV[state[6]  as usize];
        state[7]  = S_BOX_INV[state[7]  as usize];
        state[8]  = S_BOX_INV[state[8]  as usize];
        state[9]  = S_BOX_INV[state[9]  as usize];
        state[10] = S_BOX_INV[state[10] as usize];
        state[11] = S_BOX_INV[state[11] as usize];
        state[12] = S_BOX_INV[state[12] as usize];
        state[13] = S_BOX_INV[state[13] as usize];
        state[14] = S_BOX_INV[state[14] as usize];
        state[15] = S_BOX_INV[state[15] as usize];
        
        r = r + 1;

        if r >= nr {
            break;
        }

        // AddRoundKey
        *state_u64.add(0) = *state_u64.add(0) ^ *rk.add(0);
        *state_u64.add(1) = *state_u64.add(1) ^ *rk.add(1);
        rk = rk.sub(2);

        // InvMixColumns
        x9_u64 = *state_u64.add(0);
        xb_u64 = double_on_gf(x9_u64);
        xd_u64 = double_on_gf(xb_u64);
        xe_u64 = double_on_gf(xd_u64);
        x9_u64 = xe_u64 ^ x9_u64;
        xe_u64 = xe_u64 ^ xd_u64 ^ xb_u64;
        xb_u64 = xb_u64 ^ x9_u64;
        xd_u64 = xd_u64 ^ x9_u64;
        
        state[0]  = *xe.add(0) ^ *xb.add(1) ^ *xd.add(2) ^ *x9.add(3);
        state[1]  = *x9.add(0) ^ *xe.add(1) ^ *xb.add(2) ^ *xd.add(3);
        state[2]  = *xd.add(0) ^ *x9.add(1) ^ *xe.add(2) ^ *xb.add(3);
        state[3]  = *xb.add(0) ^ *xd.add(1) ^ *x9.add(2) ^ *xe.add(3);

        state[4]  = *xe.add(4) ^ *xb.add(5) ^ *xd.add(6) ^ *x9.add(7);
        state[5]  = *x9.add(4) ^ *xe.add(5) ^ *xb.add(6) ^ *xd.add(7);
        state[6]  = *xd.add(4) ^ *x9.add(5) ^ *xe.add(6) ^ *xb.add(7);
        state[7]  = *xb.add(4) ^ *xd.add(5) ^ *x9.add(6) ^ *xe.add(7);

        x9_u64 = *state_u64.add(1);
        xb_u64 = double_on_gf(x9_u64);
        xd_u64 = double_on_gf(xb_u64);
        xe_u64 = double_on_gf(xd_u64);
        x9_u64 = xe_u64 ^ x9_u64;
        xe_u64 = xe_u64 ^ xd_u64 ^ xb_u64;
        xb_u64 = xb_u64 ^ x9_u64;
        xd_u64 = xd_u64 ^ x9_u64;
        
        state[8]  = *xe.add(0) ^ *xb.add(1) ^ *xd.add(2) ^ *x9.add(3);
        state[9]  = *x9.add(0) ^ *xe.add(1) ^ *xb.add(2) ^ *xd.add(3);
        state[10] = *xd.add(0) ^ *x9.add(1) ^ *xe.add(2) ^ *xb.add(3);
        state[11] = *xb.add(0) ^ *xd.add(1) ^ *x9.add(2) ^ *xe.add(3);

        state[12] = *xe.add(4) ^ *xb.add(5) ^ *xd.add(6) ^ *x9.add(7);
        state[13] = *x9.add(4) ^ *xe.add(5) ^ *xb.add(6) ^ *xd.add(7);
        state[14] = *xd.add(4) ^ *x9.add(5) ^ *xe.add(6) ^ *xb.add(7);
        state[15] = *xb.add(4) ^ *xd.add(5) ^ *x9.add(6) ^ *xe.add(7);

    }
    
    // AddRoundKey
    *(block_out as *mut u64).add(0) = *state_u64.add(0) ^ *rk.add(0);
    *(block_out as *mut u64).add(1) = *state_u64.add(1) ^ *rk.add(1);

}

pub unsafe fn aes_cipher_quick(expanded_key: *const u8, block_in: *const u8, 
    block_out: *mut u8, nr: usize) {

    let sp1: *const u32     = S_BOX_P1.as_ptr() as *const u32;
    let sp2: *const u32     = S_BOX_P2.as_ptr() as *const u32;
    let sp3: *const u32     = S_BOX_P3.as_ptr() as *const u32;
    let sp4: *const u32     = S_BOX_P4.as_ptr() as *const u32;

    let mut state: [u8; 16] = [0; 16];
    let state_u64: *mut u64 = state.as_ptr() as *mut u64;
    let rk: *const u64      = expanded_key as *const u64;
    let mut t_u32: [u32; 4] = [0; 4];
    let t_u64: *const u64   = t_u32.as_ptr() as *const u64;  // tw as size_t

    // AddRoundKey
    *state_u64.add(0) = *(block_in as *const u64).add(0) ^ *rk.add(0);
    *state_u64.add(1) = *(block_in as *const u64).add(1) ^ *rk.add(1);

    let mut i: usize = 1;
    loop {
        
        // SubBytes o ShiftRows o MixColumns            
        t_u32[0] = {
            *sp1.add(state[0]  as usize) ^ *sp2.add(state[5]  as usize) ^ 
            *sp3.add(state[10] as usize) ^ *sp4.add(state[15] as usize) 
        };
        t_u32[1] = {
            *sp1.add(state[4]  as usize) ^ *sp2.add(state[9]  as usize) ^ 
            *sp3.add(state[14] as usize) ^ *sp4.add(state[3]  as usize)
        }; 
        t_u32[2] = {
            *sp1.add(state[8]  as usize) ^ *sp2.add(state[13] as usize) ^
            *sp3.add(state[2]  as usize) ^ *sp4.add(state[7]  as usize)
        };
        t_u32[3] = {
            *sp1.add(state[12] as usize) ^ *sp2.add(state[1]  as usize) ^ 
            *sp3.add(state[6]  as usize) ^ *sp4.add(state[11] as usize) 
        };

        // AddRoundKey
        let rk_idx: usize = i << 1;
        *state_u64.add(0) = *t_u64.add(0) ^ *rk.add(rk_idx + 0);
        *state_u64.add(1) = *t_u64.add(1) ^ *rk.add(rk_idx + 1);

        i = i + 1;

        if i >= nr {
            break;
        }

    };

    // SubBytes o ShiftRows
    state[0]  = S_BOX[state[0]  as usize];
    state[4]  = S_BOX[state[4]  as usize];
    state[8]  = S_BOX[state[8]  as usize];
    state[12] = S_BOX[state[12] as usize];
    let temp  = state[1];
    state[1]  = S_BOX[state[5]  as usize];
    state[5]  = S_BOX[state[9]  as usize];
    state[9]  = S_BOX[state[13] as usize];
    state[13] = S_BOX[temp      as usize];
    let temp  = state[2];
    state[2]  = S_BOX[state[10] as usize];
    state[10] = S_BOX[temp      as usize];
    let temp  = state[6];
    state[6]  = S_BOX[state[14] as usize];
    state[14] = S_BOX[temp      as usize];
    let temp  = state[15];
    state[15] = S_BOX[state[11] as usize];
    state[11] = S_BOX[state[7]  as usize];
    state[7]  = S_BOX[state[3]  as usize];
    state[3]  = S_BOX[temp      as usize];

    // AddRoundKey
    let rk_idx: usize = nr << 1;
    *(block_out as *mut u64).add(0) = *state_u64.add(0) ^ *rk.add(rk_idx + 0);
    *(block_out as *mut u64).add(1) = *state_u64.add(1) ^ *rk.add(rk_idx + 1);

}

impl BlockCipher for Aes {

    const BLOCK_SIZE: usize = 16;

    // Cipher
    fn encrypt_block(&self, block_in: &[u8], block_out: &mut [u8]) -> Option<CryptoError> { 
        
        if block_in.len() < 16 {
            return Some(CryptoError::new("the length of $block_in is too short"));
        } else if block_out.len() < 16 {
            return Some(CryptoError::new("the length of $block_out is too short"));
        }

        unsafe { 
            aes_cipher_quick(
                self.w.as_ptr() as *const u8, 
                block_in.as_ptr() as *const u8, 
                block_out.as_ptr() as *mut u8, 
                self.nr);
        }

        return None;

    }

    // InvCipher
    fn decrypt_block(&self, block_in: &[u8], block_out: &mut [u8]) -> Option<CryptoError> {

        if block_in.len() < 16 {
            return Some(CryptoError::new("the length of $block_in is too short"));
        } else if block_out.len() < 16 {
            return Some(CryptoError::new("the length of $block_out is too short"));
        }

        unsafe { 
            aes_inv_cipher(
                self.w.as_ptr() as *const u8, 
                block_in.as_ptr() as *const u8, 
                block_out.as_ptr() as *mut u8, 
                self.nr);
        }

        return None;

    }

}

impl Aes {

    pub fn new(algo: AesAlgorithm, key: &[u8]) -> Result<Self, CryptoError> {
        return match algo {
            AesAlgorithm::Aes128 => Ok(Self::new_aes_128(key)?),
            AesAlgorithm::Aes192 => Ok(Self::new_aes_192(key)?),
            AesAlgorithm::Aes256 => Ok(Self::new_aes_256(key)?)
        };
    }

    pub fn new_aes_128(key: &[u8]) -> Result<Self, CryptoError> {
        
        if key.len() < AES_128_KEY_LEN {
            return Err(CryptoError::new("key length is too short"));
        }

        let aes: Aes = Aes{ w : [0x00; 240], nk: AES_128_NK, nb: AES_128_NB, nr: AES_128_NR };
        unsafe { aes_key_expansion(key.as_ptr() as *const u8, aes.w.as_ptr() as *mut u8, aes.nk); }
        return Ok(aes);

    }

    pub fn new_aes_192(key: &[u8]) -> Result<Self, CryptoError> {
        
        if key.len() < AES_192_KEY_LEN {
            return Err(CryptoError::new("key length is too short"));
        }

        let aes: Aes = Aes{ w: [0x00; 240], nk: AES_192_NK, nb: AES_192_NB, nr: AES_192_NR };
        unsafe { aes_key_expansion(key.as_ptr() as *const u8, aes.w.as_ptr() as *mut u8, aes.nk); }
        return Ok(aes);

    }

    pub fn new_aes_256(key: &[u8]) -> Result<Self, CryptoError> {

        if key.len() < AES_256_KEY_LEN {
            return Err(CryptoError::new("key length is too short"));
        }

        let aes: Aes = Aes{ w: [0x00; 240], nk: AES_256_NK, nb: AES_256_NB, nr: AES_256_NR };
        unsafe { aes_key_expansion(key.as_ptr() as *const u8, aes.w.as_ptr() as *mut u8, aes.nk); }
        return Ok(aes);

    }

}
